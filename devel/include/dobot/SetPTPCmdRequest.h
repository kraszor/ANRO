// Generated by gencpp from file dobot/SetPTPCmdRequest.msg
// DO NOT EDIT!


#ifndef DOBOT_MESSAGE_SETPTPCMDREQUEST_H
#define DOBOT_MESSAGE_SETPTPCMDREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dobot
{
template <class ContainerAllocator>
struct SetPTPCmdRequest_
{
  typedef SetPTPCmdRequest_<ContainerAllocator> Type;

  SetPTPCmdRequest_()
    : ptpMode(0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , r(0.0)
    , isQueued(false)  {
    }
  SetPTPCmdRequest_(const ContainerAllocator& _alloc)
    : ptpMode(0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , r(0.0)
    , isQueued(false)  {
  (void)_alloc;
    }



   typedef uint8_t _ptpMode_type;
  _ptpMode_type ptpMode;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _z_type;
  _z_type z;

   typedef float _r_type;
  _r_type r;

   typedef uint8_t _isQueued_type;
  _isQueued_type isQueued;





  typedef boost::shared_ptr< ::dobot::SetPTPCmdRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dobot::SetPTPCmdRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetPTPCmdRequest_

typedef ::dobot::SetPTPCmdRequest_<std::allocator<void> > SetPTPCmdRequest;

typedef boost::shared_ptr< ::dobot::SetPTPCmdRequest > SetPTPCmdRequestPtr;
typedef boost::shared_ptr< ::dobot::SetPTPCmdRequest const> SetPTPCmdRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dobot::SetPTPCmdRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dobot::SetPTPCmdRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dobot::SetPTPCmdRequest_<ContainerAllocator1> & lhs, const ::dobot::SetPTPCmdRequest_<ContainerAllocator2> & rhs)
{
  return lhs.ptpMode == rhs.ptpMode &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.r == rhs.r &&
    lhs.isQueued == rhs.isQueued;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dobot::SetPTPCmdRequest_<ContainerAllocator1> & lhs, const ::dobot::SetPTPCmdRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dobot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dobot::SetPTPCmdRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dobot::SetPTPCmdRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dobot::SetPTPCmdRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dobot::SetPTPCmdRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dobot::SetPTPCmdRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dobot::SetPTPCmdRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dobot::SetPTPCmdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6a58846b57dc1548a16ac6374d7d2a7d";
  }

  static const char* value(const ::dobot::SetPTPCmdRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6a58846b57dc1548ULL;
  static const uint64_t static_value2 = 0xa16ac6374d7d2a7dULL;
};

template<class ContainerAllocator>
struct DataType< ::dobot::SetPTPCmdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dobot/SetPTPCmdRequest";
  }

  static const char* value(const ::dobot::SetPTPCmdRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dobot::SetPTPCmdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 ptpMode\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"float32 r\n"
"bool isQueued\n"
;
  }

  static const char* value(const ::dobot::SetPTPCmdRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dobot::SetPTPCmdRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ptpMode);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.r);
      stream.next(m.isQueued);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetPTPCmdRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dobot::SetPTPCmdRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dobot::SetPTPCmdRequest_<ContainerAllocator>& v)
  {
    s << indent << "ptpMode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ptpMode);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<float>::stream(s, indent + "  ", v.z);
    s << indent << "r: ";
    Printer<float>::stream(s, indent + "  ", v.r);
    s << indent << "isQueued: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isQueued);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DOBOT_MESSAGE_SETPTPCMDREQUEST_H
